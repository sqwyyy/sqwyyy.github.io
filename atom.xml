<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sqwyyy.com/"/>
  <updated>2020-05-07T16:34:14.084Z</updated>
  <id>http://sqwyyy.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单调栈经典题</title>
    <link href="http://sqwyyy.com/2020/05/07/%E5%8D%95%E8%B0%83%E6%A0%88%E7%BB%8F%E5%85%B8%E9%A2%98/"/>
    <id>http://sqwyyy.com/2020/05/07/%E5%8D%95%E8%B0%83%E6%A0%88%E7%BB%8F%E5%85%B8%E9%A2%98/</id>
    <published>2020-05-07T12:04:23.000Z</published>
    <updated>2020-05-07T16:34:14.084Z</updated>
    
    <content type="html"><![CDATA[<p>题意：给出一个序列，要求的是一个区间，这个区间的最小值乘以这个区间数字的和是最大值</p><p>==单调栈处理的问题就是对每一个节点进行扩展的问题，<br>这个题目要维护的是一个单调递减栈，即从栈顶元素到栈底元素，值是单调递减的，即栈顶元素的值始终是栈的最大值。然后每一个值有属于自己的区间，这个区间目的是为了记录之后的元素向前延伸的用处。<br>向后延伸就靠从1到n扫描元素，(维护单调递减栈)这样当扫描的元素大于栈顶元素时，直接入栈。<br>当扫描的元素等于栈顶元素时，不记录，只将区间延伸到后面。<br>当扫描的元素小于栈顶元素时，这时要计算栈内当前的值。因为扫描的元素时小于栈顶元素的，要求的是一个区间的最小值，所以栈内那些大于该元素的值你会发现没有用处了，只需要将它们的那些区间留下来就对了，这就是向前扩展。==</p><hr><p>3 1 6 4 5 2</p><p>一开始每一个数都有自己的区间：</p><p>3(1,1)  1(2,2)  6(3,3)  4(4,4)  5(5,5)  2(6,6)  -1(7,7)后面加一个最小值，为了最后计算栈内元素使用。</p><p>先是3入栈。栈内元素 3(1,1)</p><p>1&lt;3，首先计算一下栈内元素的值，记录下来。然后要把栈内大于1的全部弹出来，但是把它们的区间留下，栈内就变成了1(1,2)。实际上此时就会知道(1,2)这段区间之内的最小值是1。<br>6&gt;1，直接入栈，栈内元素变为1(1,2)，6(3,3)。<br>4&lt;6，将6弹出，弹出之前计算值。然后栈内就变为1(1,2)，4(3,4)。<br>5&gt;4，直接入栈。栈内元素是1(1,2),4(3,4),5(5,5)。会发现因为5没有办法向前扩展了所以会知道5只能够在(5,5)的区间内最小，所以说站内元素是在自己区间的左端点与栈顶元素的右端点，这段区间之内满足着最小值的关系。1是在(1,5)这段区间内最小，4是在(3,5)这段区间内最小。这些值都会在碰到扫描的元素小于该元素时计算，记录下来，就是这样单调栈完成了对每一个元素进行左右扩展的目的。<br>2&lt;5,2&lt;4。要把5(5,5) 4(3,4)分别弹出，它们走之前要计算各自区间的值。<br>最后是-1，目的就是要将栈内所有元素弹出，计算每一个元素左右扩展的值。</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100001</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a[N], lef[N], s[N], top;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">ll ans = <span class="number">-1</span>, tmp;</span><br><span class="line"><span class="keyword">int</span> i, j, n;</span><br><span class="line"><span class="keyword">int</span> ll, rr;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">&#125;</span><br><span class="line">a[++n] = <span class="number">-1</span>;</span><br><span class="line">top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (top == <span class="number">0</span> || a[i] &gt; a[s[top - <span class="number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">s[top++] = i;</span><br><span class="line">lef[i] = i;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[i] == a[s[top - <span class="number">1</span>]])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">while</span> (top &gt;= <span class="number">1</span> &amp;&amp; a[i] &lt; a[s[top - <span class="number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">--top;</span><br><span class="line">tmp = <span class="number">1L</span>L*a[s[top]] * (sum[i - <span class="number">1</span>] - sum[lef[s[top]] - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tmp &gt; ans)</span><br><span class="line">&#123;</span><br><span class="line">ll = lef[s[top]];</span><br><span class="line">rr = i - <span class="number">1</span>;</span><br><span class="line">ans = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">lef[i] = lef[s[top]];</span><br><span class="line">s[top++] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>&lt;&lt;l&lt;&lt;<span class="string">" "</span>&lt;&lt;r&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：给出一个序列，要求的是一个区间，这个区间的最小值乘以这个区间数字的和是最大值&lt;/p&gt;
&lt;p&gt;==单调栈处理的问题就是对每一个节点进行扩展的问题，&lt;br&gt;这个题目要维护的是一个单调递减栈，即从栈顶元素到栈底元素，值是单调递减的，即栈顶元素的值始终是栈的最大值。然后每一个
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://sqwyyy.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="单调栈" scheme="http://sqwyyy.com/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
</feed>
